---
- name: Create kubernetes script directory
  file: path={{ kube_script_dir }} state=directory

- name: Create system kube-cert groups
  group: name={{ kube_cert_group }} state=present system=yes

- name: Create system kube user
  user:
    name=kube
    comment="Kubernetes user"
    shell=/sbin/nologin
    state=present
    system=yes
    groups={{ kube_cert_group }}

- name: make sure the certificate directory exits
  file:
    path={{ kube_cert_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- name: make sure the tokens directory exits
  file:
    path={{ kube_token_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- include: gen_certs.yml
  when: inventory_hostname == groups['masters'][0]

- name: Read back the CA certificate
  slurp:
    src: "{{ kube_cert_dir }}/ca.crt"
  register: ca_cert
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the CA certificate as a fact so it can be used later
  set_fact:
    kube_ca_cert: "{{ ca_cert.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy: content="{{ kube_ca_cert }}" dest="{{ kube_cert_dir }}/ca.crt"


- name: Read back the CA key
  slurp:
    src: "{{ kube_cert_dir }}/ca.key"
  register: ca_key
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the CA key as a fact so it can be used later
  set_fact:
    kube_ca_key: "{{ ca_key.content|b64decode }}"

- name: Place CA key and kube_cfg credentials everywhere
  copy: content="{{ kube_ca_key }}" dest="{{ kube_cert_dir }}/ca.key"
  when: inventory_hostname in groups['masters']

- include: gen_tokens.yml
  when: inventory_hostname == groups['masters'][0]
