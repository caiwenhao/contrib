---
- name: Copy the token gen script
  copy:
    src=kube-gen-token.sh
    dest={{ kube_script_dir }}
    mode=u+x

- name: Generate tokens for master components
  command: "{{ kube_script_dir }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: "{{ kube_token_dir }}"
  with_nested:
    - [ "system:controller_manager", "system:scheduler", "system:kubectl" ]
    - "{{ groups['masters'] }}"
  register: gentoken
  changed_when: "'Added' in gentoken.stdout"
  notify:
    - restart daemons
  delegate_to: "{{ groups['masters'][0] }}"

- name: Generate tokens for node components
  command: "{{ kube_script_dir }}/kube-gen-token.sh {{ item }}"
  environment:
    TOKEN_DIR: "{{ kube_token_dir }}"
  with_items:
    - [ 'system:kubelet-bootstrap' ]
  register: gentoken
  changed_when: "'Added' in gentoken.stdout"
  notify:
    - restart daemons
  delegate_to: "{{ groups['masters'][0] }}"

- name: Read back the tokens
  slurp:
    src: "{{ kube_cert_dir }}/tokens/known_tokens.csv"
  register: master_tokens
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the tokens as a fact so it can be used later
  set_fact:
    kube_tokens_key: "{{ master_tokens.content|b64decode }}"

- name: Place tokens everywhere
  copy: content="{{ kube_tokens_key }}" dest="{{ kube_cert_dir }}/tokens/known_tokens.csv"
  when: inventory_hostname in groups['masters']

